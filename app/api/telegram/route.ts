import { NextResponse } from 'next/server'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { brand, model, year, transmission, city, name, phone, desiredAmount, description } = body

    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.error('Telegram credentials not configured')
      return NextResponse.json(
        { error: 'Telegram not configured' },
        { status: 500 }
      )
    }

    // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const cleanPhone = phone.replace(/\D/g, '')

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
üöó *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–ö–£–ü –ê–í–¢–û*

*–ê–≤—Ç–æ–º–æ–±–∏–ª—å:*
‚Ä¢ –ú–∞—Ä–∫–∞: ${brand}
‚Ä¢ –ú–æ–¥–µ–ª—å: ${model}
‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${year}
‚Ä¢ –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: ${transmission}
‚Ä¢ –ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ${city}
${description ? `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}` : ''}

*–ö–ª–∏–µ–Ω—Ç:*
‚Ä¢ –ò–º—è: ${name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${cleanPhone}
${desiredAmount ? `‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞: ${desiredAmount}` : ''}

_–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}_
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      }
    )

    const telegramData = await telegramResponse.json()

    if (!telegramResponse.ok) {
      console.error('Telegram API error:', telegramData)
      return NextResponse.json(
        { error: 'Failed to send message to Telegram' },
        { status: 500 }
      )
    }

    return NextResponse.json({ success: true, message: 'Message sent successfully' })
  } catch (error) {
    console.error('Error processing request:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
